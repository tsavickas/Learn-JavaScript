JavaScript is a Dynamic Language


// VARIABLES

// declare variable called 'name'
let name = "Tadas";
console.log(name);

// var => function-scoped
// ES6 (ES2015): let, const => block-scoped

// Variables:
// cannot be a reserved keyword
// should be meaningful
// cannot start with a number (1name)
// cannot contain a space or hyphen (-)
// are case-sensitive

let firstName = "Tadas";
let lastName = "Savickas";

// PRIMITIVE TYPES - TITLE
// String, Number, Boolean, undefined, null
let name = "Tadas"; // String Literal
let age = 35; // Number Literal
let isApproved = true; // Boolean Literal
let firstName;
let selectedColor = null;


// CONSTANTS

const interestRate = 0.3;
console.log(interestRate);


// OBJECTS

// Declare a person object

let person = {
  name: "Tadas",
  age: 35,
};
// Properties (keys): name, age

// 1st way to access property - Dot Notation
person.name = "Tadas";

// 2nd way to access property - Bracket Notation
person["name"] = "Julia";

console.log(person.name);



// REFERENCE TYPES: Object, Array, Function

// FUNCTIONS - a set of statements that performs a task or calculate a value

// Performing a task
function greet(name, lastName) {
  console.log("Hello " + name + " " + lastName);
}

// Calculating a value
function square(number) {
  return number * number;
}

greet("John", "Smith");

let number = square(2);
console.log(number);

console.log(square(3));

// "John" is an argument of the greet function. Argument is an actual value we supply to the parameter.
// name is a parameter of the greet function

// ARRAYS - Data structure that we use to represent a list of items.

let selectedColors = ["red", "blue"];
selectedColors[2] = "green";
console.log(selectedColors.length);


// ASSIGNMENT OPERATORS

let x = 10;

x++; // equal to:
x = x + 1;

x += 5; // equal to:
x = x + 5;

x *= 3; // equal to:
x = x * 3;


// ARITHMETIC OPERATORS

let x = 10;
let y = 3;

console.log(x + y); // Addition
console.log(x - y); // Subtraction
console.log(x * y); // Multiplication
console.log(x / y); // Division
console.log(x % y); // Reminder to division
console.log(x ** y); // Exponentiation

// Increment operator (++)
console.log(x);
console.log(++x);
console.log(x++);
// Decrement operator (--)
console.log(x);
console.log(--x);
console.log(x--);


// EQUALITY OPERATORS

// Strict Equality (Type + Value)
console.log(1 === 1);
console.log("1" === 1);

// Lose Equality
console.log(1 == 1);
console.log("1" == 1);
console.log(true == 1);


// COMPARISON OPERATORS

let x = 1;

// Relational
console.log(x > 0);
console.log(x >= 1);
console.log(x < 1);
console.log(x <= 1);

// Equality
console.log(x === 1);
console.log(x !== 0);


// TERNARY (CONDITIONAL) OPERATOR

// If a customer has more than 100 points,
// they are a 'gold' customer, otherwise,
// they are a 'silver' customer.

let points = 110;
let type = points > 100 ? "gold" : "silver";
console.log(type)


// LOGICAL OPERATORS

// Logical AND (&&)
// Returns TRUE if both operands are TRUE
console.log(true && true);
console.log(false && true);
console.log(false && false);

let highIncome = true;
let goodCreditScore = true;
let eligibleForLoan = highIncome && goodCreditScore;
console.log(eligibleForLoan);

// Logical OR (||)
// Returns TRUE if one of the operands is TRUE

let highIncome = false;
let goodCreditScore = true;
let eligibleForLoan = highIncome || goodCreditScore;
console.log(eligibleForLoan);

// NOT (!)
let highIncome = false;
let goodCreditScore = false;
let eligibleForLoan = highIncome || goodCreditScore;
console.log("Eligible", eligibleForLoan);
let applicationRefused = !eligibleForLoan;
console.log("Application Refused", applicationRefused);


// LOGICAL OPERATORS WTH NON-BOOLEANS

// Falsy (false) values:
// - undefined
// - null
// - 0
// - false
// - ''
// - NaN

// Anything that is nor Falsy -> Truthy

// Example:

let userColor = undefined;
let defaultColor = "blue";
let currentColor = userColor || defaultColor;

console.log(currentColor);

// IF ... ELSE

let hour = 20;
if (hour >= 6 && hour < 12) console.log("Good morning");
else if (hour >= 12 && hour < 18) console.log("Good afternoon");
else console.log("Good evening");

// FOR LOOP

for (let i = 0; i <= 5; i++) {
  if (i % 2 !== 0) console.log(i);
}

// WHILE LOOP

let i = 0;
while (i <= 5) {
  if (i % 2 !== 0) console.log(i);
  i++;
}

// FOR-IN: use to iterate over properties of an object

const person = {
  name: "Tadas",
  age: 35,
};

for (let key in person) console.log(key, person[key]);

// FOR-OF: use to iterate over elements of items in an array

for (let color of colors) console.log(color);

// OBJECTS

const circle = {
  radius: 1,
  location: {
    x: 1,
    y: 1
  },
  isVisible: true,
  draw: function() {
    console.log('draw');
  }
};

// FACTORY FUNCTION

function createCircle(radius) {
  return {
    radius,
    draw() {
      console.log('draw');
    }
  };
}

const circle1 = createCircle(1);
console.log(circle1);

// CONSTRUCTOR FUNCTION

function ShowAddress(street, city, zipCode) {
  this.street = street;
  this.city = city;
  this.zipCode = zipCode;
}

const address2 = new ShowAddress("Zaliakalnio", "Kaunas", "45632");
console.log(address2);

// ADDING ELEMENTS TO ARRAY

const numbers = [2, 3];
// End
numbers.push(5, 6);
// Beggining
numbers.unshift(1,2);
// Middle
numbers.splice(2, 0, 'a', 'b');

console.log(numbers)

// FINDING ELEMENTS IN THE ARRAY
// Primitive type array

const numbers = [1, 2, 3, 1, 4];
console.log(numbers).indexOf(1));
console.log(numbers).lastindexOf(1));
console.log(numbers).includes(1));

// Reference type array

const courses = [
  { id: 1, name: "a" },
  { id: 2, name: "b" },
];

const course = courses.findIndex((course) => course.name === "b");

console.log(course);

// REMOVE ELEMENTS FROM AN ANRRAY

const numbers = [1, 2, 3, 4];

// End
numbers.pop();
// Beginning;
numbers.shift();
// Middle;
numbers.splice();

// EMTYING AN ARRAY

let numbers = [1, 2, 3, 4];

// Solution 1
numbers = [];

// Solution 2
numbers.length = 0;

// COMBINING AND SLICING ARRAYS

const first = [1, 2, 3, 4, 5, 6];
const second = [7, 8, 9];

// option 1
first.concat(second);
first.slice(2, 4);

// option 2 - using spread operator
const combined = [...first, 'a', ...second, 'b']
const copy = [...combined];

// OTHER USEFUL METHODS FOR ARRAYS

const numbers = [1, 2, -1, 6, 5, 4, 3];

numbers.join();
numbers.split();
numbers.sort();
numbers.reverse();
numbers.every();
numbers.some();

const filtered = numbers.filter((number) => number >= 0);
const items = filtered.map((number) => ({ value: number }));

// Chaining of methods

const items = numbers
  .filter((number) => number >= 0)
  .map((number) => ({ value: number }))
  .filter((obj) => obj.value > 1)
  .map((obj) => obj.value);

console.log(items);

// Sum of array items

const sum = numbers.reduce(
  (accumulator, currentValue) => accumulator + currentValue
);


// FUNCTIONS

// Function Declaration
// HOISTING is the process of moving function declaration to the top of the file. It is done automatically by JS engine.
function walk() {
  console.log("walk");
}

walk();

// Anonymous Function Expression
let run = function () {
  console.log("run");
};

let move = run;
run();
move();

// Function arguments
function sum(a, b) {
  console.log(arguments);
  return a + b;
}
console.log("function sum:", sum(1, 2, 3, 4, 5));

// ==============>>>>
function sum2() {
  let total = 0;
  for (let value of arguments) total += value;
  return total;
}
console.log("function sum2:", sum2(1, 2, 3, 4, 5));

// ==============>>>>
//  Rest operator (...args)
function sum3(...args) {
  return args.reduce((a, b) => a + b);
}
console.log("function sum3:", sum3(1, 2, 3, 4, 5));

function discountedSum(discount, ...prices) {
  const total = prices.reduce((a, b) => a + b);
  return total * (1 - discount);
}
console.log("discounted sum: ", discountedSum(0.2, 35, 55));

// Default values
function interest(principal, rate, years) {
  rate = rate || 3.5;
  years = years || 5;

  return ((principal * rate) / 100) * years;
}
// ===>>> the same code according to ES6 (ECMAScript 6):
function interest(principal, rate = 3.5, years = 5) {
  return ((principal * rate) / 100) * years;
}
console.log(insterest(10000));

// Getters and Setters
const person = {
  firstName: "Tadas",
  lastName: "Savickas",
  get fullName() {
    return `${person.firstName} ${person.lastName}`;
  },
  set fullName(value) {
    const parts = value.split(" ");
    this.firstName = parts[0];
    this.firstName = parts[1];
  },
};
// getters (get) => access properties
// setters (set) => change (mutate) properties

// Setter:
person.fullName = "Vardenis Pavardenis";

console.log(person);
